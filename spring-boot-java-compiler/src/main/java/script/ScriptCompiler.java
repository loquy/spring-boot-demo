package script;import javax.tools.*;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.net.URI;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.List;import java.util.concurrent.*;/** * @author loquy */public class ScriptCompiler {    public Class<?> compile(String javaSource) throws Exception {        JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();        DiagnosticCollector<JavaFileObject> diagnosticsCollector = new DiagnosticCollector<>();        StandardJavaFileManager standardFileManager = javaCompiler.getStandardFileManager(null, null, null);        JavaFileObject file = new StringObject(ScriptConstant.CLASS_NAME, javaSource);        Iterable<String> options = Arrays.asList("-d", ScriptConstant.CLASS_PATH);        Iterable<? extends JavaFileObject> files = Collections.singletonList(file);        JavaCompiler.CompilationTask task = javaCompiler.getTask(null, standardFileManager, diagnosticsCollector, options, null, files);        Boolean result = task.call();        if (!result) {            StringBuilder diagnosticString = new StringBuilder();            List<Diagnostic<? extends JavaFileObject>> diagnostics = diagnosticsCollector.getDiagnostics();            for (Diagnostic<? extends JavaFileObject> diagnostic : diagnostics) {                diagnosticString.append(diagnostic);            }            throw new Exception("编译失败，请检查语法是否正确，具体错误：" + diagnosticString);        }        return loadClass("Main");    }    /**     * 加载CLASS     *     * @param className 类名     * @return class文件     */    public Class<?> loadClass(String className) throws Exception {        //用自定义classLoader加载这个class        ScriptLoader scriptLoader = new ScriptLoader(getClass().getClassLoader());        return scriptLoader.loadClass(className);    }    public String executeMainMethod(Class<?> clazz, Long timeLimit, String[] args) throws ScriptException {        final ExecutorService executorService = Executors.newFixedThreadPool(10);        List<FutureTask<String>> futureTaskList = new ArrayList<>();        Callable<String> mainMethodExecuteCallable = () -> executeMainMethodWithClass(clazz, args);        FutureTask<String> futureTask = new FutureTask<>(mainMethodExecuteCallable);        futureTaskList.add(futureTask);        executorService.submit(futureTask);        String result = null;        FutureTask<String> taskItem = futureTaskList.get(0);        try {            result = taskItem.get(timeLimit, TimeUnit.MILLISECONDS);        } catch (TimeoutException e) {            taskItem.cancel(true);            e.printStackTrace();            throw new ScriptException("运行超时了！限定时间为:" + timeLimit + "毫秒");        } catch (SecurityException | ExecutionException | InterruptedException e) {            e.printStackTrace();            throw new ScriptException("执行失败，请检查代码是否含有危险操作，具体错误：" + e.getMessage());        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    private String executeMainMethodWithClass(Class<?> clazz, String[] args) throws ScriptException {        ByteArrayOutputStream baoStream = new ByteArrayOutputStream(1024);        PrintStream cacheStream = new PrintStream(baoStream);        PrintStream oldStream = System.out;        System.setOut(cacheStream);        //执行Main方法        try {            long threadId = Thread.currentThread().getId();            ScriptSecurityManager.initPermission(threadId);            Method method = clazz.getMethod("main", String[].class);            method.invoke(null, (Object) args);            ScriptSecurityManager.destroyPermission();        } catch (InvocationTargetException e) {            // 获取目标异常            Throwable t = e.getTargetException();            t.printStackTrace();            throw new ScriptException(t.getMessage());        } catch (IllegalAccessException | NoSuchMethodException e) {            e.printStackTrace();            throw new ScriptException(e.getMessage());        } finally {            ScriptSecurityManager.destroyPermission();        }        System.setOut(oldStream);        return baoStream.toString();    }    private static class StringObject extends SimpleJavaFileObject {        private final String contents;        public StringObject(String className, String contents) {            super(URI.create("String:///" + className + Kind.SOURCE.extension), Kind.SOURCE);            this.contents = contents;        }        @Override        public CharSequence getCharContent(boolean ignoreEncodingErrors) {            return contents;        }    }    public static void main(String[] args) {        String code = "    import java.io.*;\n" +                "    public class Main {\n" +                "        public static void main(String[] args) throws InterruptedException{\n" +                "            File file = new File(\"D:\\\\test\");\n" +                "            System.out.println(args[0]);\n" +//                "            boolean delete = file.delete();\n" +//                " for (int i = 10; i>=0; i--) {\n" +//                " Thread.sleep(1000);  \n" +//                " }\n" +//                "            System.out.println(delete);\n" +//                "            System.exit(0);\n" +                "        }\n" +                "    }";        System.out.println(code);        ScriptCompiler scriptCompiler = new ScriptCompiler();        try {            Class<?> clazz = scriptCompiler.compile(code);            String string = scriptCompiler.executeMainMethod(clazz, 1000L, new String[]{"123"});            System.out.println("--------->" + string);        } catch (Exception e) {            e.printStackTrace();            System.out.println(e.getMessage());        }    }}