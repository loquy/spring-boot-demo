package script;import java.io.ByteArrayOutputStream;import java.io.FileInputStream;import java.nio.ByteBuffer;import java.nio.channels.Channels;import java.nio.channels.FileChannel;import java.nio.channels.WritableByteChannel;/** * @author loquy */public class ScriptLoader extends ClassLoader {    public ScriptLoader(ClassLoader parent) {        super(parent);    }    @Override    protected Class<?> findClass(String name) {        //将包转为目录        String classPath = name.replace(".", "\\") + ".class";        String classFile = ScriptConstant.CLASS_PATH + classPath;        Class<?> clazz = null;        try {            byte[] data = getClassFileBytes(classFile);            clazz = defineClass(name, data, 0, data.length);            if (null == clazz) {                throw new Exception("类加载器里不能找到这个类");            }        } catch (Exception e) {            e.printStackTrace();        }        return clazz;    }    private byte[] getClassFileBytes(String classFile) throws Exception {        //采用NIO读取        FileInputStream fis = new FileInputStream(classFile);        FileChannel fileC = fis.getChannel();        ByteArrayOutputStream baos = new ByteArrayOutputStream();        WritableByteChannel outC = Channels.newChannel(baos);        ByteBuffer buffer = ByteBuffer.allocateDirect(1024);        while (true) {            int i = fileC.read(buffer);            if (i == 0 || i == -1) {                break;            }            buffer.flip();            outC.write(buffer);            buffer.clear();        }        fis.close();        return baos.toByteArray();    }}